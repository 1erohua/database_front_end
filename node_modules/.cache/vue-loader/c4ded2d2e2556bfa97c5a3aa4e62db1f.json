{"remainingRequest":"/home/zerohua/application/FrontEnd/tset/stu_manage_front-main/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/zerohua/application/FrontEnd/tset/stu_manage_front-main/src/views/Login.vue?vue&type=style&index=0&id=26084dc2&lang=scss&scoped=true&","dependencies":[{"path":"/home/zerohua/application/FrontEnd/tset/stu_manage_front-main/src/views/Login.vue","mtime":1736517456395},{"path":"/home/zerohua/application/FrontEnd/tset/stu_manage_front-main/node_modules/css-loader/dist/cjs.js","mtime":1735892181739},{"path":"/home/zerohua/application/FrontEnd/tset/stu_manage_front-main/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1735892182207},{"path":"/home/zerohua/application/FrontEnd/tset/stu_manage_front-main/node_modules/postcss-loader/src/index.js","mtime":1735892181895},{"path":"/home/zerohua/application/FrontEnd/tset/stu_manage_front-main/node_modules/sass-loader/dist/cjs.js","mtime":1735892181443},{"path":"/home/zerohua/application/FrontEnd/tset/stu_manage_front-main/node_modules/cache-loader/dist/cjs.js","mtime":1735892181475},{"path":"/home/zerohua/application/FrontEnd/tset/stu_manage_front-main/node_modules/vue-loader/lib/index.js","mtime":1735892182047}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoubG9naW4gewogIHBhZGRpbmctdG9wOiAxMDBweDsgIC8vIOeZu+W9leWuueWZqOS4iui+uei3nQogIHRleHQtYWxpZ246IGNlbnRlcjsgIC8vIOWGheWuueWxheS4rQp9CmgyIHsKICBjb2xvcjogIzUwMDg3NzsgIC8vIOagh+mimOminOiJsgogIHBhZGRpbmc6IDIwcHg7ICAvLyDmoIfpopjlhoXovrnot50KfQoubG9naW4tZm9ybSB7CiAgbWFyZ2luOiBhdXRvOyAgLy8g6KGo5Y2V5bGF5LitCiAgbWF4LXdpZHRoOiA1MDBweDsgIC8vIOihqOWNleacgOWkp+WuveW6pgogIC5lbC1mb3JtLWl0ZW1fX2xhYmVsIHsKICAgIGNvbG9yOiAjMDAwMDAwOyAgLy8g6KGo5Y2V5qCH562+6aKc6ImyCiAgfQogIAp9Ci5sb2dpbi1mb3JtLXN1Ym1pdCB7CiAgdGV4dC1hbGlnbjogY2VudGVyOyAgLy8g5o+Q5Lqk5oyJ6ZKu5bGF5LitCn0KLmxvZ2luLXN1Ym1pdCB7CiAgZGlzcGxheTogYmxvY2s7ICAvLyDmjInpkq7lnZfnuqfmmL7npLoKICBtYXJnaW46IDAgYXV0bzsgIC8vIOaMiemSruWxheS4rQogIHRleHQtYWxpZ246IGNlbnRlcjsgIC8vIOaMiemSruaWh+acrOWxheS4rQogIHdpZHRoOiAyMDBweDsgIC8vIOaMiemSruWuveW6pgp9Cg=="},{"version":3,"sources":["Login.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAuQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"Login.vue","sourceRoot":"src/views","sourcesContent":["<!-- <template>\n  <div class=\"login\">\n    <h2>乐队与乐迷管理系统</h2>\n    <el-form\n      :model=\"loginForm\"\n      status-icon\n      :rules=\"rules\"\n      ref=\"loginForm\"\n      label-width=\"100px\"\n      class=\"demo-loginForm login-form\"\n    >\n      <el-form-item label=\"用户名\" prop=\"code\">\n        <el-input\n          type=\"text\"\n          autocomplete=\"off\"\n          v-model=\"loginForm.code\"\n        ></el-input>\n      </el-form-item>\n      <el-form-item label=\"密码\" prop=\"password\">\n        <el-input\n          type=\"password\"\n          v-model=\"loginForm.password\"\n          autocomplete=\"off\"\n        ></el-input>\n      </el-form-item>\n\n      <el-form-item login-form-submit>\n        <el-button\n          class=\"login-submit\"\n          type=\"primary\"\n          @click=\"submitForm('loginForm')\"\n          >登录</el-button\n        >\n      </el-form-item>\n      <p>登录账号admin 密码123456</p>\n    </el-form>\n  </div>\n</template> -->\n\n<template>\n  <div class=\"login\">\n    <h2>乐队与乐迷管理系统</h2>\n    <el-form\n      :model=\"loginForm\"\n      status-icon\n      :rules=\"rules\"\n      ref=\"loginForm\"\n      label-width=\"100px\"\n      class=\"demo-loginForm login-form\"\n    >\n      <el-form-item label=\"用户名\" prop=\"code\">\n        <el-input\n          type=\"text\"\n          autocomplete=\"off\"\n          v-model=\"loginForm.code\"\n        ></el-input>\n      </el-form-item>\n      <el-form-item label=\"密码\" prop=\"password\">\n        <el-input\n          type=\"password\"\n          v-model=\"loginForm.password\"\n          autocomplete=\"off\"\n        ></el-input>\n      </el-form-item>\n      <el-form-item label=\"角色\" prop=\"role\">\n        <el-select v-model=\"loginForm.role\" placeholder=\"请选择角色\">\n          <el-option label=\"Manager\" value=\"Manager\"></el-option>\n          <el-option label=\"BandMember\" value=\"BandMember\"></el-option>\n          <el-option label=\"Fan\" value=\"Fan\"></el-option>\n        </el-select>\n      </el-form-item>\n      <el-form-item login-form-submit>\n        <el-button\n          class=\"login-submit\"\n          type=\"primary\"\n          @click=\"submitForm('loginForm')\"\n          >登录</el-button\n        >\n      </el-form-item>\n      <p>登录账号admin 密码123456</p>\n    </el-form>\n  </div>\n</template>\n\n\n\n\n\n\n<!-- \n<script>\nexport default {\n  name: \"Login\",  // 组件名称\n\n  // 数据定义部分\n  data() {\n    // 校验用户名输入\n    const validateUsername = (rule, value, callback) => {\n      if (value === \"\") {\n        callback(new Error(\"请输入用户名\"));  // 如果用户名为空，返回错误信息\n      } else {\n        callback();  // 否则通过校验\n      }\n    };\n\n    // 校验密码输入\n    const validatePass = (rule, value, callback) => {\n      if (value === \"\") {\n        callback(new Error(\"请输入密码\"));  // 如果密码为空，返回错误信息\n      } else {\n        if (value.length < 6) {\n          callback(new Error(\"密码不能少于6位\"));  // 如果密码长度小于6位，返回错误信息\n        }\n        callback();  // 否则通过校验\n      }\n    };\n\n    return {\n      // 表单数据对象\n      loginForm: {\n        code: \"\",  // 用户名\n        password: \"\",  // 密码\n      },\n      // 表单校验规则\n      rules: {\n        code: [\n          { required: true, trigger: \"blur\", validator: validateUsername },  // 用户名必填，失去焦点时触发校验\n        ],\n        password: [{ validator: validatePass, trigger: \"blur\" }],  // 密码校验，失去焦点时触发校验\n      },\n    };\n  },\n  methods: {\n    // 提交登录表单\n    submitForm(loginForm) {\n      this.$refs[loginForm].validate((valid) => {  // 校验表单\n        if (valid) {\n          // 如果校验通过，调用登录接口\n          this.$store.dispatch(\"login\", this.loginForm).then((res) => {\n            let {data} = res  // 解构返回的数据\n            console.log(data);\n            if(data.code == 1000){  // 如果返回码为1000，表示登录成功\n              this.$message({ message:data.message, type: \"success\" });  // 显示成功消息\n              // 获取登录用户信息\n              // this.$store.dispatch(\"getInfo\",data)\n\n              this.$router.push({ path: this.redirect || '/' })  // 跳转到首页或指定页面\n            }else {\n              this.$message({ message:data.message, type: \"warning\" });  // 显示警告消息\n            }\n          }).catch((error)=> {\n            // 登录失败时显示错误信息\n            this.$message({ message: error.message, type: \"error\" });\n          });\n        } else {\n          console.log(\"error submit!!\");  // 校验失败，打印错误信息\n          return false;\n        }\n      });\n    },\n    // 重置表单\n    resetForm(formName) {\n      this.$refs[formName].resetFields();  // 调用Element UI的resetFields方法重置表单\n    },\n  },\n};\n</script>\n -->\n\n<script>\nexport default {\n  name: \"Login\",  // 组件名称\n\n  // 数据定义部分\n  data() {\n    // 校验用户名输入\n    const validateUsername = (rule, value, callback) => {\n      if (value === \"\") {\n        callback(new Error(\"请输入用户名\"));  // 如果用户名为空，返回错误信息\n      } else {\n        callback();  // 否则通过校验\n      }\n    };\n\n    // 校验密码输入\n    const validatePass = (rule, value, callback) => {\n      if (value === \"\") {\n        callback(new Error(\"请输入密码\"));  // 如果密码为空，返回错误信息\n      } else {\n        if (value.length < 1) {\n          callback(new Error(\"密码不能少于1位\"));  // 如果密码长度小于6位，返回错误信息\n        }\n        callback();  // 否则通过校验\n      }\n    };\n\n    // 校验角色选择\n    const validateRole = (rule, value, callback) => {\n      if (value === \"\") {\n        callback(new Error(\"请选择角色\"));  // 如果角色为空，返回错误信息\n      } else {\n        callback();  // 否则通过校验\n      }\n    };\n\n    return {\n      // 表单数据对象\n      loginForm: {\n        code: \"\",  // 用户名\n        password: \"\",  // 密码\n        role: \"\",  // 角色\n      },\n      // 表单校验规则\n      rules: {\n        code: [\n          { required: true, trigger: \"blur\", validator: validateUsername },  // 用户名必填，失去焦点时触发校验\n        ],\n        password: [{ validator: validatePass, trigger: \"blur\" }],  // 密码校验，失去焦点时触发校验\n        role: [{ required: true, trigger: \"change\", validator: validateRole }],  // 角色校验，选择时触发校验\n      },\n    };\n  },\n  methods: {\n    // 提交登录表单\n    submitForm(loginForm) {\n      this.$refs[loginForm].validate((valid) => {  // 校验表单\n        if (valid) {\n          // 如果校验通过，调用登录接口\n          console.log(\"这是第一步\")\n          this.$store.dispatch(\"login\", this.loginForm).then((res) => {\n\n          console.log(\"这是第二步\")\n          let {data} = res  // 解构返回的数据\n\n          console.log(data);\n\n          this.$message({ message:data.message, type: \"success\" });  // 显示成功消息\n\n          // 获取登录用户信息\n          // this.$store.dispatch(\"getInfo\",data)\n          this.$router.push({ path: this.redirect || '/' })  // 跳转到首页或指定页面\n          }).catch((error)=> {\n            // 登录失败时显示错误信息\n            this.$message({ message: error.message, type: \"error\" });\n          });\n        } else {\n          console.log(\"error submit!!\");  // 校验失败，打印错误信息\n          return false;\n        }\n      });\n    },\n    // 重置表单\n    resetForm(formName) {\n      this.$refs[formName].resetFields();  // 调用Element UI的resetFields方法重置表单\n    },\n  },\n};\n</script>\n\n\n\n\n<style lang=\"scss\" scoped>\n.login {\n  padding-top: 100px;  // 登录容器上边距\n  text-align: center;  // 内容居中\n}\nh2 {\n  color: #500877;  // 标题颜色\n  padding: 20px;  // 标题内边距\n}\n.login-form {\n  margin: auto;  // 表单居中\n  max-width: 500px;  // 表单最大宽度\n  .el-form-item__label {\n    color: #000000;  // 表单标签颜色\n  }\n  \n}\n.login-form-submit {\n  text-align: center;  // 提交按钮居中\n}\n.login-submit {\n  display: block;  // 按钮块级显示\n  margin: 0 auto;  // 按钮居中\n  text-align: center;  // 按钮文本居中\n  width: 200px;  // 按钮宽度\n}\n</style>"]}]}