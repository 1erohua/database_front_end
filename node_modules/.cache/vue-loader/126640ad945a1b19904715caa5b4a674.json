{"remainingRequest":"/home/zerohua/application/FrontEnd/tset/stu_manage_front-main/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/zerohua/application/FrontEnd/tset/stu_manage_front-main/src/views/Login.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/zerohua/application/FrontEnd/tset/stu_manage_front-main/src/views/Login.vue","mtime":1736517456395},{"path":"/home/zerohua/application/FrontEnd/tset/stu_manage_front-main/node_modules/cache-loader/dist/cjs.js","mtime":1735892181475},{"path":"/home/zerohua/application/FrontEnd/tset/stu_manage_front-main/node_modules/babel-loader/lib/index.js","mtime":1735892181655},{"path":"/home/zerohua/application/FrontEnd/tset/stu_manage_front-main/node_modules/cache-loader/dist/cjs.js","mtime":1735892181475},{"path":"/home/zerohua/application/FrontEnd/tset/stu_manage_front-main/node_modules/vue-loader/lib/index.js","mtime":1735892182047}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KCmV4cG9ydCBkZWZhdWx0IHsKICBuYW1lOiAiTG9naW4iLCAgLy8g57uE5Lu25ZCN56ewCgogIC8vIOaVsOaNruWumuS5iemDqOWIhgogIGRhdGEoKSB7CiAgICAvLyDmoKHpqoznlKjmiLflkI3ovpPlhaUKICAgIGNvbnN0IHZhbGlkYXRlVXNlcm5hbWUgPSAocnVsZSwgdmFsdWUsIGNhbGxiYWNrKSA9PiB7CiAgICAgIGlmICh2YWx1ZSA9PT0gIiIpIHsKICAgICAgICBjYWxsYmFjayhuZXcgRXJyb3IoIuivt+i+k+WFpeeUqOaIt+WQjSIpKTsgIC8vIOWmguaenOeUqOaIt+WQjeS4uuepuu+8jOi/lOWbnumUmeivr+S/oeaBrwogICAgICB9IGVsc2UgewogICAgICAgIGNhbGxiYWNrKCk7ICAvLyDlkKbliJnpgJrov4fmoKHpqowKICAgICAgfQogICAgfTsKCiAgICAvLyDmoKHpqozlr4bnoIHovpPlhaUKICAgIGNvbnN0IHZhbGlkYXRlUGFzcyA9IChydWxlLCB2YWx1ZSwgY2FsbGJhY2spID0+IHsKICAgICAgaWYgKHZhbHVlID09PSAiIikgewogICAgICAgIGNhbGxiYWNrKG5ldyBFcnJvcigi6K+36L6T5YWl5a+G56CBIikpOyAgLy8g5aaC5p6c5a+G56CB5Li656m677yM6L+U5Zue6ZSZ6K+v5L+h5oGvCiAgICAgIH0gZWxzZSB7CiAgICAgICAgaWYgKHZhbHVlLmxlbmd0aCA8IDEpIHsKICAgICAgICAgIGNhbGxiYWNrKG5ldyBFcnJvcigi5a+G56CB5LiN6IO95bCR5LqOMeS9jSIpKTsgIC8vIOWmguaenOWvhueggemVv+W6puWwj+S6jjbkvY3vvIzov5Tlm57plJnor6/kv6Hmga8KICAgICAgICB9CiAgICAgICAgY2FsbGJhY2soKTsgIC8vIOWQpuWImemAmui/h+agoemqjAogICAgICB9CiAgICB9OwoKICAgIC8vIOagoemqjOinkuiJsumAieaLqQogICAgY29uc3QgdmFsaWRhdGVSb2xlID0gKHJ1bGUsIHZhbHVlLCBjYWxsYmFjaykgPT4gewogICAgICBpZiAodmFsdWUgPT09ICIiKSB7CiAgICAgICAgY2FsbGJhY2sobmV3IEVycm9yKCLor7fpgInmi6nop5LoibIiKSk7ICAvLyDlpoLmnpzop5LoibLkuLrnqbrvvIzov5Tlm57plJnor6/kv6Hmga8KICAgICAgfSBlbHNlIHsKICAgICAgICBjYWxsYmFjaygpOyAgLy8g5ZCm5YiZ6YCa6L+H5qCh6aqMCiAgICAgIH0KICAgIH07CgogICAgcmV0dXJuIHsKICAgICAgLy8g6KGo5Y2V5pWw5o2u5a+56LGhCiAgICAgIGxvZ2luRm9ybTogewogICAgICAgIGNvZGU6ICIiLCAgLy8g55So5oi35ZCNCiAgICAgICAgcGFzc3dvcmQ6ICIiLCAgLy8g5a+G56CBCiAgICAgICAgcm9sZTogIiIsICAvLyDop5LoibIKICAgICAgfSwKICAgICAgLy8g6KGo5Y2V5qCh6aqM6KeE5YiZCiAgICAgIHJ1bGVzOiB7CiAgICAgICAgY29kZTogWwogICAgICAgICAgeyByZXF1aXJlZDogdHJ1ZSwgdHJpZ2dlcjogImJsdXIiLCB2YWxpZGF0b3I6IHZhbGlkYXRlVXNlcm5hbWUgfSwgIC8vIOeUqOaIt+WQjeW/heWhq++8jOWkseWOu+eEpueCueaXtuinpuWPkeagoemqjAogICAgICAgIF0sCiAgICAgICAgcGFzc3dvcmQ6IFt7IHZhbGlkYXRvcjogdmFsaWRhdGVQYXNzLCB0cmlnZ2VyOiAiYmx1ciIgfV0sICAvLyDlr4bnoIHmoKHpqozvvIzlpLHljrvnhKbngrnml7bop6blj5HmoKHpqowKICAgICAgICByb2xlOiBbeyByZXF1aXJlZDogdHJ1ZSwgdHJpZ2dlcjogImNoYW5nZSIsIHZhbGlkYXRvcjogdmFsaWRhdGVSb2xlIH1dLCAgLy8g6KeS6Imy5qCh6aqM77yM6YCJ5oup5pe26Kem5Y+R5qCh6aqMCiAgICAgIH0sCiAgICB9OwogIH0sCiAgbWV0aG9kczogewogICAgLy8g5o+Q5Lqk55m75b2V6KGo5Y2VCiAgICBzdWJtaXRGb3JtKGxvZ2luRm9ybSkgewogICAgICB0aGlzLiRyZWZzW2xvZ2luRm9ybV0udmFsaWRhdGUoKHZhbGlkKSA9PiB7ICAvLyDmoKHpqozooajljZUKICAgICAgICBpZiAodmFsaWQpIHsKICAgICAgICAgIC8vIOWmguaenOagoemqjOmAmui/h++8jOiwg+eUqOeZu+W9leaOpeWPowogICAgICAgICAgY29uc29sZS5sb2coIui/meaYr+esrOS4gOatpSIpCiAgICAgICAgICB0aGlzLiRzdG9yZS5kaXNwYXRjaCgibG9naW4iLCB0aGlzLmxvZ2luRm9ybSkudGhlbigocmVzKSA9PiB7CgogICAgICAgICAgY29uc29sZS5sb2coIui/meaYr+esrOS6jOatpSIpCiAgICAgICAgICBsZXQge2RhdGF9ID0gcmVzICAvLyDop6PmnoTov5Tlm57nmoTmlbDmja4KCiAgICAgICAgICBjb25zb2xlLmxvZyhkYXRhKTsKCiAgICAgICAgICB0aGlzLiRtZXNzYWdlKHsgbWVzc2FnZTpkYXRhLm1lc3NhZ2UsIHR5cGU6ICJzdWNjZXNzIiB9KTsgIC8vIOaYvuekuuaIkOWKn+a2iOaBrwoKICAgICAgICAgIC8vIOiOt+WPlueZu+W9leeUqOaIt+S/oeaBrwogICAgICAgICAgLy8gdGhpcy4kc3RvcmUuZGlzcGF0Y2goImdldEluZm8iLGRhdGEpCiAgICAgICAgICB0aGlzLiRyb3V0ZXIucHVzaCh7IHBhdGg6IHRoaXMucmVkaXJlY3QgfHwgJy8nIH0pICAvLyDot7PovazliLDpppbpobXmiJbmjIflrprpobXpnaIKICAgICAgICAgIH0pLmNhdGNoKChlcnJvcik9PiB7CiAgICAgICAgICAgIC8vIOeZu+W9leWksei0peaXtuaYvuekuumUmeivr+S/oeaBrwogICAgICAgICAgICB0aGlzLiRtZXNzYWdlKHsgbWVzc2FnZTogZXJyb3IubWVzc2FnZSwgdHlwZTogImVycm9yIiB9KTsKICAgICAgICAgIH0pOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICBjb25zb2xlLmxvZygiZXJyb3Igc3VibWl0ISEiKTsgIC8vIOagoemqjOWksei0pe+8jOaJk+WNsOmUmeivr+S/oeaBrwogICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgIH0KICAgICAgfSk7CiAgICB9LAogICAgLy8g6YeN572u6KGo5Y2VCiAgICByZXNldEZvcm0oZm9ybU5hbWUpIHsKICAgICAgdGhpcy4kcmVmc1tmb3JtTmFtZV0ucmVzZXRGaWVsZHMoKTsgIC8vIOiwg+eUqEVsZW1lbnQgVUnnmoRyZXNldEZpZWxkc+aWueazlemHjee9ruihqOWNlQogICAgfSwKICB9LAp9Owo="},{"version":3,"sources":["Login.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA0KA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"Login.vue","sourceRoot":"src/views","sourcesContent":["<!-- <template>\n  <div class=\"login\">\n    <h2>乐队与乐迷管理系统</h2>\n    <el-form\n      :model=\"loginForm\"\n      status-icon\n      :rules=\"rules\"\n      ref=\"loginForm\"\n      label-width=\"100px\"\n      class=\"demo-loginForm login-form\"\n    >\n      <el-form-item label=\"用户名\" prop=\"code\">\n        <el-input\n          type=\"text\"\n          autocomplete=\"off\"\n          v-model=\"loginForm.code\"\n        ></el-input>\n      </el-form-item>\n      <el-form-item label=\"密码\" prop=\"password\">\n        <el-input\n          type=\"password\"\n          v-model=\"loginForm.password\"\n          autocomplete=\"off\"\n        ></el-input>\n      </el-form-item>\n\n      <el-form-item login-form-submit>\n        <el-button\n          class=\"login-submit\"\n          type=\"primary\"\n          @click=\"submitForm('loginForm')\"\n          >登录</el-button\n        >\n      </el-form-item>\n      <p>登录账号admin 密码123456</p>\n    </el-form>\n  </div>\n</template> -->\n\n<template>\n  <div class=\"login\">\n    <h2>乐队与乐迷管理系统</h2>\n    <el-form\n      :model=\"loginForm\"\n      status-icon\n      :rules=\"rules\"\n      ref=\"loginForm\"\n      label-width=\"100px\"\n      class=\"demo-loginForm login-form\"\n    >\n      <el-form-item label=\"用户名\" prop=\"code\">\n        <el-input\n          type=\"text\"\n          autocomplete=\"off\"\n          v-model=\"loginForm.code\"\n        ></el-input>\n      </el-form-item>\n      <el-form-item label=\"密码\" prop=\"password\">\n        <el-input\n          type=\"password\"\n          v-model=\"loginForm.password\"\n          autocomplete=\"off\"\n        ></el-input>\n      </el-form-item>\n      <el-form-item label=\"角色\" prop=\"role\">\n        <el-select v-model=\"loginForm.role\" placeholder=\"请选择角色\">\n          <el-option label=\"Manager\" value=\"Manager\"></el-option>\n          <el-option label=\"BandMember\" value=\"BandMember\"></el-option>\n          <el-option label=\"Fan\" value=\"Fan\"></el-option>\n        </el-select>\n      </el-form-item>\n      <el-form-item login-form-submit>\n        <el-button\n          class=\"login-submit\"\n          type=\"primary\"\n          @click=\"submitForm('loginForm')\"\n          >登录</el-button\n        >\n      </el-form-item>\n      <p>登录账号admin 密码123456</p>\n    </el-form>\n  </div>\n</template>\n\n\n\n\n\n\n<!-- \n<script>\nexport default {\n  name: \"Login\",  // 组件名称\n\n  // 数据定义部分\n  data() {\n    // 校验用户名输入\n    const validateUsername = (rule, value, callback) => {\n      if (value === \"\") {\n        callback(new Error(\"请输入用户名\"));  // 如果用户名为空，返回错误信息\n      } else {\n        callback();  // 否则通过校验\n      }\n    };\n\n    // 校验密码输入\n    const validatePass = (rule, value, callback) => {\n      if (value === \"\") {\n        callback(new Error(\"请输入密码\"));  // 如果密码为空，返回错误信息\n      } else {\n        if (value.length < 6) {\n          callback(new Error(\"密码不能少于6位\"));  // 如果密码长度小于6位，返回错误信息\n        }\n        callback();  // 否则通过校验\n      }\n    };\n\n    return {\n      // 表单数据对象\n      loginForm: {\n        code: \"\",  // 用户名\n        password: \"\",  // 密码\n      },\n      // 表单校验规则\n      rules: {\n        code: [\n          { required: true, trigger: \"blur\", validator: validateUsername },  // 用户名必填，失去焦点时触发校验\n        ],\n        password: [{ validator: validatePass, trigger: \"blur\" }],  // 密码校验，失去焦点时触发校验\n      },\n    };\n  },\n  methods: {\n    // 提交登录表单\n    submitForm(loginForm) {\n      this.$refs[loginForm].validate((valid) => {  // 校验表单\n        if (valid) {\n          // 如果校验通过，调用登录接口\n          this.$store.dispatch(\"login\", this.loginForm).then((res) => {\n            let {data} = res  // 解构返回的数据\n            console.log(data);\n            if(data.code == 1000){  // 如果返回码为1000，表示登录成功\n              this.$message({ message:data.message, type: \"success\" });  // 显示成功消息\n              // 获取登录用户信息\n              // this.$store.dispatch(\"getInfo\",data)\n\n              this.$router.push({ path: this.redirect || '/' })  // 跳转到首页或指定页面\n            }else {\n              this.$message({ message:data.message, type: \"warning\" });  // 显示警告消息\n            }\n          }).catch((error)=> {\n            // 登录失败时显示错误信息\n            this.$message({ message: error.message, type: \"error\" });\n          });\n        } else {\n          console.log(\"error submit!!\");  // 校验失败，打印错误信息\n          return false;\n        }\n      });\n    },\n    // 重置表单\n    resetForm(formName) {\n      this.$refs[formName].resetFields();  // 调用Element UI的resetFields方法重置表单\n    },\n  },\n};\n</script>\n -->\n\n<script>\nexport default {\n  name: \"Login\",  // 组件名称\n\n  // 数据定义部分\n  data() {\n    // 校验用户名输入\n    const validateUsername = (rule, value, callback) => {\n      if (value === \"\") {\n        callback(new Error(\"请输入用户名\"));  // 如果用户名为空，返回错误信息\n      } else {\n        callback();  // 否则通过校验\n      }\n    };\n\n    // 校验密码输入\n    const validatePass = (rule, value, callback) => {\n      if (value === \"\") {\n        callback(new Error(\"请输入密码\"));  // 如果密码为空，返回错误信息\n      } else {\n        if (value.length < 1) {\n          callback(new Error(\"密码不能少于1位\"));  // 如果密码长度小于6位，返回错误信息\n        }\n        callback();  // 否则通过校验\n      }\n    };\n\n    // 校验角色选择\n    const validateRole = (rule, value, callback) => {\n      if (value === \"\") {\n        callback(new Error(\"请选择角色\"));  // 如果角色为空，返回错误信息\n      } else {\n        callback();  // 否则通过校验\n      }\n    };\n\n    return {\n      // 表单数据对象\n      loginForm: {\n        code: \"\",  // 用户名\n        password: \"\",  // 密码\n        role: \"\",  // 角色\n      },\n      // 表单校验规则\n      rules: {\n        code: [\n          { required: true, trigger: \"blur\", validator: validateUsername },  // 用户名必填，失去焦点时触发校验\n        ],\n        password: [{ validator: validatePass, trigger: \"blur\" }],  // 密码校验，失去焦点时触发校验\n        role: [{ required: true, trigger: \"change\", validator: validateRole }],  // 角色校验，选择时触发校验\n      },\n    };\n  },\n  methods: {\n    // 提交登录表单\n    submitForm(loginForm) {\n      this.$refs[loginForm].validate((valid) => {  // 校验表单\n        if (valid) {\n          // 如果校验通过，调用登录接口\n          console.log(\"这是第一步\")\n          this.$store.dispatch(\"login\", this.loginForm).then((res) => {\n\n          console.log(\"这是第二步\")\n          let {data} = res  // 解构返回的数据\n\n          console.log(data);\n\n          this.$message({ message:data.message, type: \"success\" });  // 显示成功消息\n\n          // 获取登录用户信息\n          // this.$store.dispatch(\"getInfo\",data)\n          this.$router.push({ path: this.redirect || '/' })  // 跳转到首页或指定页面\n          }).catch((error)=> {\n            // 登录失败时显示错误信息\n            this.$message({ message: error.message, type: \"error\" });\n          });\n        } else {\n          console.log(\"error submit!!\");  // 校验失败，打印错误信息\n          return false;\n        }\n      });\n    },\n    // 重置表单\n    resetForm(formName) {\n      this.$refs[formName].resetFields();  // 调用Element UI的resetFields方法重置表单\n    },\n  },\n};\n</script>\n\n\n\n\n<style lang=\"scss\" scoped>\n.login {\n  padding-top: 100px;  // 登录容器上边距\n  text-align: center;  // 内容居中\n}\nh2 {\n  color: #500877;  // 标题颜色\n  padding: 20px;  // 标题内边距\n}\n.login-form {\n  margin: auto;  // 表单居中\n  max-width: 500px;  // 表单最大宽度\n  .el-form-item__label {\n    color: #000000;  // 表单标签颜色\n  }\n  \n}\n.login-form-submit {\n  text-align: center;  // 提交按钮居中\n}\n.login-submit {\n  display: block;  // 按钮块级显示\n  margin: 0 auto;  // 按钮居中\n  text-align: center;  // 按钮文本居中\n  width: 200px;  // 按钮宽度\n}\n</style>"]}]}